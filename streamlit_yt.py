import streamlit as st
import sqlite3
import os
import pandas as pd
import plotly.express as px
from scipy.stats import spearmanr


def get_db_files():
    return [f for f in os.listdir() if f.endswith('.db')]


def connect_to_db(db_name):
    try:
        conn = sqlite3.connect(db_name, check_same_thread=False)
        st.session_state['conn'] = conn
        st.toast(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {db_name}", icon="‚úÖ")
    except Exception as e:
        st.toast(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", icon="üö®")


def disconnect_db():
    if 'conn' in st.session_state and st.session_state['conn']:
        st.session_state['conn'].close()
        st.session_state['conn'] = None
        st.toast("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", icon="üö®")


def execute_query(query):
    try:
        if 'conn' not in st.session_state or not st.session_state['conn']:
            st.toast("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", icon="üö®")
            return None

        conn = st.session_state['conn']
        cursor = conn.cursor()
        cursor.execute(query)
        conn.commit()
        data = cursor.fetchall()
        columns = [desc[0]
                   for desc in cursor.description] if cursor.description else []
        st.toast(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", icon="‚úÖ")
        return pd.DataFrame(data, columns=columns) if data else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def visualize_data(topic):
    if 'conn' not in st.session_state or not st.session_state['conn']:
        st.toast("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", icon="üö®")
        return

    conn = st.session_state['conn']

    @st.cache_data
    def fetch_data(query):
        return pd.read_sql_query(query, conn)

    def highlight_max(val, column_name):
        if column_name == '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
            max_value = correlation_df['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].max()
        elif column_name == '–õ–∞–π–∫–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å':
            max_value = correlation_df['–õ–∞–π–∫–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'].max()
        color = '#292929'
        if val == max_value:
            color = '#006400'
        return f'background-color: {color}'

    if topic == "–ö–∞–Ω–∞–ª—ã":
        videos_df = fetch_data('''
        SELECT Videos.ID, Videos.Title, Channels.Title AS Channel, 
               Videos.LikeCount, Videos.DislikeCount, Videos.ViewCount, Videos.CommentCount, 
               Videos.CreationDate, Videos.Duration, Projects.Title AS Project
        FROM Videos
        JOIN Channels ON Videos.Channel_ID = Channels.ID
        LEFT JOIN Projects ON Videos.Project_ID = Projects.ID; 
        ''')

        comments_df = fetch_data('''
        SELECT Comments.Video_ID, Comments.CreationDate, Comments.Sentiment
        FROM Comments
        JOIN Videos ON Comments.Video_ID = Videos.ID;
        ''')

        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–µ–æ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º")

        videos_df['CreationDate'] = pd.to_datetime(videos_df['CreationDate'])
        comments_df['CreationDate'] = pd.to_datetime(
            comments_df['CreationDate'])

        selected_channel = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", videos_df['Channel'].unique())
        filtered_videos = videos_df[videos_df['Channel'] == selected_channel]

        avg_views = filtered_videos['ViewCount'].mean()
        avg_likes = filtered_videos['LikeCount'].mean()
        avg_dislikes = filtered_videos['DislikeCount'].mean()
        avg_comments = filtered_videos['CommentCount'].mean()

        total1, total2, total3, total4 = st.columns(4, gap='small')

        with total1:
            st.info('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤', icon="üëÄ")
            st.metric(label="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:", value=f"{avg_views:,.0f}")
        with total2:
            st.info('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤', icon="üëç")
            st.metric(label="–õ–∞–π–∫–∏:", value=f"{avg_likes:,.0f}")

        with total3:
            st.info('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤', icon="üëé")
            st.metric(label="–î–∏–∑–ª–∞–π–∫–∏:", value=f"{avg_dislikes:,.0f}")

        with total4:
            st.info('–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', icon="üí¨")
            st.metric(label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:", value=f"{avg_comments:,.0f}")

        video_ids = filtered_videos['ID'].unique()
        filtered_comments = comments_df[comments_df['Video_ID'].isin(
            video_ids)]

        videos_grouped = filtered_videos.resample(
            'M', on='CreationDate').sum().reset_index()

        comments_grouped = filtered_comments.groupby([
            pd.Grouper(key='CreationDate', freq='M'), 'Sentiment']
        ).size().reset_index(name='Count')

        left, right = st.columns(2)

        with left:
            fig_metrics_by_month = px.line(
                videos_grouped,
                x='CreationDate',
                y=['ViewCount', 'LikeCount', 'DislikeCount', 'CommentCount'],
                labels={
                    'CreationDate': '–î–∞—Ç–∞',
                    'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    'variable': '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'
                },
                title="–î–∏–Ω–∞–º–∏–∫–∞ –æ—Ö–≤–∞—Ç–æ–≤ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞",
                markers=True)

            fig_metrics_by_month.update_layout(
                hovermode="x unified", xaxis_title=None)

            st.plotly_chart(fig_metrics_by_month)

        with right:
            sentiment_mapping = {0: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
                                 1: "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π",
                                 2: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"}
            comments_grouped['Sentiment'] = comments_grouped['Sentiment'].map(
                sentiment_mapping)

            fig_sentiment_by_month = px.line(
                comments_grouped,
                x='CreationDate',
                y='Count',
                color='Sentiment',
                labels={
                    'CreationDate': '–î–∞—Ç–∞',
                    'Count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                    'Sentiment': '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'},
                title="–î–∏–Ω–∞–º–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
                markers=True)

            fig_sentiment_by_month.update_layout(
                legend_title_text="–°–µ–Ω—Ç–∏–º–µ–Ω—Ç",
                xaxis_title=None,
                yaxis_title=None,
                hovermode="x unified")

            st.plotly_chart(fig_sentiment_by_month)

        scatter_left, scatter_right = st.columns(2)

        with scatter_left:
            fig_duration_comments = px.scatter(
                filtered_videos,
                x='Duration', y='CommentCount',
                color='Project',
                labels={'Duration': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫.)',
                        'CommentCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
                        'Project': '–ü—Ä–æ–µ–∫—Ç'},
                title="–°–≤—è–∑—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ",
                size_max=30)
            st.plotly_chart(fig_duration_comments)

        with scatter_right:
            fig_duration_likes = px.scatter(
                filtered_videos,
                x='Duration', y='LikeCount',
                color='Project',
                labels={'Duration': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫.)',
                        'LikeCount': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤',
                        'Project': '–ü—Ä–æ–µ–∫—Ç'},
                title="–°–≤—è–∑—å –ª–∞–π–∫–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ",
                size_max=30)
            st.plotly_chart(fig_duration_likes)

        correlation_results = []

        for project in filtered_videos['Project'].dropna().unique():
            project_videos = filtered_videos[filtered_videos['Project'] == project]
            if len(project_videos) > 1:
                corr_comments, p_comments = spearmanr(
                    project_videos['Duration'], project_videos['CommentCount'])
                corr_likes, p_likes = spearmanr(
                    project_videos['Duration'], project_videos['LikeCount'])
                correlation_results.append({
                    '–ü—Ä–æ–µ–∫—Ç—ã': project,
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{corr_comments:.2f}{'*' if p_comments < 0.05 else ''}",
                    '–õ–∞–π–∫–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{corr_likes:.2f}{'*' if p_likes < 0.05 else ''}"})

        correlation_df = pd.DataFrame(correlation_results)

        st.write("### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º")

        styled_correlation_df = correlation_df.style.map(
            lambda val: highlight_max(val, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'),
            subset=['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']).map(lambda val: highlight_max(val, '–õ–∞–π–∫–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'),
                                                          subset=['–õ–∞–π–∫–∏-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'])

        st.dataframe(styled_correlation_df, use_container_width=True)

    elif topic == "–í–∏–¥–µ–æ":
        videos_df = fetch_data('''
        SELECT Videos.ID, Videos.Title, Channels.Title AS Channel, 
               Videos.LikeCount, Videos.DislikeCount, Videos.ViewCount, Videos.CommentCount,
               strftime('%Y', Videos.CreationDate) AS Year,
               Projects.Title AS Project_Title
        FROM Videos
        JOIN Channels ON Videos.Channel_ID = Channels.ID
        LEFT JOIN Projects ON Videos.Project_ID = Projects.ID; ''')

        st.header("–¢–æ–ø-10 –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º")

        selected_channel = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", videos_df['Channel'].unique())

        filtered_videos = videos_df[videos_df['Channel'] == selected_channel]

        min_year, max_year = filtered_videos['Year'].astype(
            int).min(), filtered_videos['Year'].astype(int).max()

        selected_year = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:", min_value=min_year,
            max_value=max_year, value=(min_year, max_year), step=1)

        filtered_videos = filtered_videos[
            (filtered_videos['Year'].astype(int) >= selected_year[0]) &
            (filtered_videos['Year'].astype(int) <= selected_year[1])]

        top_views = filtered_videos.nlargest(10, 'ViewCount')
        top_comments = filtered_videos.nlargest(10, 'CommentCount')
        top_likes = filtered_videos.nlargest(10, 'LikeCount')
        top_dislikes = filtered_videos.nlargest(10, 'DislikeCount')

        videos_df['Project_Title'] = videos_df['Project_Title'].fillna(
            '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞')

        unique_projects = videos_df['Project_Title'].unique()
        colors = px.colors.qualitative.G10
        color_map = {project: colors[i % len(colors)]
                     for i, project in enumerate(unique_projects)}

        left_col, right_col = st.columns(2)

        with left_col:
            fig_views = px.bar(
                top_views,
                x='Title',
                y='ViewCount',
                color='Project_Title',
                labels={'Title': '–í–∏–¥–µ–æ', 'ViewCount': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
                        'Project_Title': '–ü—Ä–æ–µ–∫—Ç'},
                title='–¢–æ–ø –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º',
                category_orders={'Title': top_views['Title'].tolist()},
                color_discrete_map=color_map)

            fig_views.update_layout(
                showlegend=True,
                xaxis_title='–í–∏–¥–µ–æ',
                xaxis=dict(showticklabels=False))

            st.plotly_chart(fig_views, use_container_width=True)

        with right_col:
            fig_comments = px.bar(
                top_comments,
                x='Title',
                y='CommentCount',
                color='Project_Title',
                labels={'Title': '–í–∏–¥–µ–æ', 'CommentCount': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
                        'Project_Title': '–ü—Ä–æ–µ–∫—Ç'},
                title='–¢–æ–ø –≤–∏–¥–µ–æ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º',
                category_orders={'Title': top_comments['Title'].tolist()},
                color_discrete_map=color_map)

            fig_comments.update_layout(
                showlegend=True,
                xaxis_title='–í–∏–¥–µ–æ',
                xaxis=dict(showticklabels=False)
            )
            st.plotly_chart(fig_comments, use_container_width=True)

        bottom_left, bottom_right = st.columns(2)

        with bottom_left:
            fig_likes = px.bar(
                top_likes,
                x='Title',
                y='LikeCount',
                color='Project_Title',
                labels={'Title': '–í–∏–¥–µ–æ', 'LikeCount': '–õ–∞–π–∫–∏',
                        'Project_Title': '–ü—Ä–æ–µ–∫—Ç'},
                title='–¢–æ–ø –≤–∏–¥–µ–æ –ø–æ –ª–∞–π–∫–∞–º',
                category_orders={'Title': top_likes['Title'].tolist()},
                color_discrete_map=color_map)

            fig_likes.update_layout(
                showlegend=True,
                xaxis_title='–í–∏–¥–µ–æ',
                xaxis=dict(showticklabels=False)
            )
            st.plotly_chart(fig_likes, use_container_width=True)

        with bottom_right:
            fig_dislikes = px.bar(
                top_dislikes,
                x='Title',
                y='DislikeCount',
                color='Project_Title',
                labels={'Title': '–í–∏–¥–µ–æ', 'DislikeCount': '–î–∏–∑–ª–∞–π–∫–∏',
                        'Project_Title': '–ü—Ä–æ–µ–∫—Ç'},
                title='–¢–æ–ø –≤–∏–¥–µ–æ –ø–æ –¥–∏–∑–ª–∞–π–∫–∞–º',
                category_orders={'Title': top_dislikes['Title'].tolist()},
                color_discrete_map=color_map)

            fig_dislikes.update_layout(
                showlegend=True,
                xaxis_title='–í–∏–¥–µ–æ',
                xaxis=dict(showticklabels=False)
            )
            st.plotly_chart(fig_dislikes, use_container_width=True)

    elif topic == "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏":
        comments_df = fetch_data('''
        SELECT Comments.ID, Comments.Text, Comments.LikeCount, Comments.Sentiment,
               Videos.Title AS VideoTitle, Channels.Title AS Channel,
               strftime('%Y', Comments.CreationDate) AS Year
        FROM Comments
        JOIN Videos ON Comments.Video_ID = Videos.ID
        JOIN Channels ON Videos.Channel_ID = Channels.ID; ''')

        st.header("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –ª–∞–π–∫–æ–≤")

        selected_channel = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", comments_df['Channel'].unique())

        filtered_comments = comments_df[comments_df['Channel']
                                        == selected_channel]

        min_year, max_year = filtered_comments['Year'].astype(
            int).min(), filtered_comments['Year'].astype(int).max()

        selected_years = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤:", min_year, max_year, (min_year, max_year), step=1)

        filtered_comments = filtered_comments[
            (filtered_comments['Year'].astype(int) >= selected_years[0]) &
            (filtered_comments['Year'].astype(int) <= selected_years[1])]

        positive_comments = filtered_comments[filtered_comments['Sentiment'] == 1]
        negative_comments = filtered_comments[filtered_comments['Sentiment'] == 2]

        top_positive = positive_comments.nlargest(10, 'LikeCount')
        top_negative = negative_comments.nlargest(10, 'LikeCount')

        st.subheader("–¢–æ–ø-10 –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        st.dataframe(top_positive[['Text', 'LikeCount', 'VideoTitle']],
                     use_container_width=True)

        st.subheader("–¢–æ–ø-10 –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        st.dataframe(top_negative[['Text', 'LikeCount', 'VideoTitle']],
                     use_container_width=True)

    elif topic == "–ü—Ä–æ–µ–∫—Ç—ã":
        incomes_df = fetch_data('''
        SELECT Projects.Title AS Project, Incomes.Amount, 
                                Incomes.CreationDate, 
                                Channels.Title AS Channel, Incomes.Category
        FROM Incomes
        JOIN Projects ON Incomes.Project_ID = Projects.ID
        JOIN Videos ON Projects.ID = Videos.Project_ID
        JOIN Channels ON Videos.Channel_ID = Channels.ID; ''')

        costs_df = fetch_data('''
        SELECT Projects.Title AS Project, Costs.Amount, Costs.CreationDate, 
                              Channels.Title AS Channel, Costs.Category
        FROM Costs
        JOIN Projects ON Costs.Project_ID = Projects.ID
        JOIN Videos ON Projects.ID = Videos.Project_ID
        JOIN Channels ON Videos.Channel_ID = Channels.ID; ''')

        st.header("–¢–æ–ø-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")

        incomes_df['CreationDate'] = pd.to_datetime(incomes_df['CreationDate'])
        costs_df['CreationDate'] = pd.to_datetime(costs_df['CreationDate'])

        selected_channel = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", incomes_df['Channel'].unique())

        filtered_incomes = incomes_df[incomes_df['Channel']
                                      == selected_channel]
        filtered_costs = costs_df[costs_df['Channel'] == selected_channel]

        min_year = min(filtered_incomes['CreationDate'].dt.year.min(),
                       filtered_costs['CreationDate'].dt.year.min())

        max_year = max(filtered_incomes['CreationDate'].dt.year.max(),
                       filtered_costs['CreationDate'].dt.year.max())

        selected_years = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç:", min_value=min_year,
            max_value=max_year, value=(min_year, max_year), step=1)

        filtered_incomes = filtered_incomes[
            (filtered_incomes['CreationDate'].dt.year >= selected_years[0]) &
            (filtered_incomes['CreationDate'].dt.year <= selected_years[1])]

        filtered_costs = filtered_costs[
            (filtered_costs['CreationDate'].dt.year >= selected_years[0]) &
            (filtered_costs['CreationDate'].dt.year <= selected_years[1])]

        top_incomes = filtered_incomes.groupby(
            'Project')['Amount'].sum().reset_index().nlargest(10, 'Amount')
        top_costs = filtered_costs.groupby(
            'Project')['Amount'].sum().reset_index().nlargest(10, 'Amount')

        left_col, right_col = st.columns(2)

        with left_col:
            fig_incomes = px.bar(
                top_incomes,
                x='Amount',
                y='Project',
                orientation='h',
                color='Project',
                title="–¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –¥–æ—Ö–æ–¥–∞–º",
                labels={'Amount': '–°—É–º–º–∞ –¥–æ—Ö–æ–¥–æ–≤', 'Project': '–ü—Ä–æ–µ–∫—Ç'})

            fig_incomes.update_layout(xaxis_title=None, yaxis_title=None,
                                      showlegend=False)

            st.plotly_chart(fig_incomes, use_container_width=True)

        with right_col:
            fig_costs = px.bar(
                top_costs,
                x='Amount', y='Project', orientation='h', color='Project',
                title="–¢–æ–ø –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º",
                labels={'Amount': '–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤', 'Project': '–ü—Ä–æ–µ–∫—Ç'})

            fig_costs.update_layout(xaxis_title=None,
                                    yaxis_title=None, showlegend=False)

            st.plotly_chart(fig_costs, use_container_width=True)

        left_col_pie, right_col_pie = st.columns(2)

        with left_col_pie:
            income_category_sums = filtered_incomes.groupby(
                'Category')['Amount'].sum().reset_index()

            fig_income_pie = px.pie(income_category_sums, values='Amount',
                                    names='Category', title="–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                    labels={'Amount': '–°—É–º–º–∞', 'Category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'})

            # fig_income_pie.update_layout(showlegend=False)

            st.plotly_chart(fig_income_pie, use_container_width=True)

        with right_col_pie:
            cost_category_sums = filtered_costs.groupby(
                'Category')['Amount'].sum().reset_index()

            fig_cost_pie = px.pie(cost_category_sums, values='Amount',
                                  names='Category',
                                  title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                                  labels={'Amount': '–°—É–º–º–∞', 'Category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'})

            # fig_cost_pie.update_layout(showlegend=False)

            st.plotly_chart(fig_cost_pie, use_container_width=True)


# ------
st.set_page_config(page_title="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥", layout="wide")

st.sidebar.image("data/medium_quality.png", use_container_width=True)

if 'conn' not in st.session_state:
    st.session_state['conn'] = None

st.sidebar.header("–°—Ç—Ä—É–∫—Ç—É—Ä–∞")

section = st.sidebar.selectbox(
    "–†–∞–∑–¥–µ–ª:", ["–í–≤–µ–¥–µ–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"],
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
    index=None)

if section == "–í–≤–µ–¥–µ–Ω–∏–µ":
    st.markdown("""
                # –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
                ## –û–±—ä–µ–∫—Ç –∏ –∑–∞–¥–∞—á–∏
                 **–û–±—ä–µ–∫—Ç:** 
                 **–ó–∞–¥–∞—á–∏:**  
                ### [–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ë–î](https://drive.google.com/file/d/1QEpDe73PID-Nicvd3Rh-d0JHgw8jpWG_/view?usp=sharing)""")
    st.image("–ü—Ä–æ–µ–∫—Ç –ë–î –í–®–≠-–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî 4.drawio (1).png",
             caption="–ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

elif section == "–ê–Ω–∞–ª–∏–∑":
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")

    db_files = get_db_files()

    selected_db = st.sidebar.selectbox("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:",
                                       db_files, index=None,
                                       placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    connection_action = st.sidebar.radio(
        "–î–µ–π—Å—Ç–≤–∏–µ:", options=["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ"],
        horizontal=True, index=None)

    if connection_action == "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" and selected_db:
        if not st.session_state['conn']:
            connect_to_db(selected_db)
    elif connection_action == "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ":
        disconnect_db()

    if 'conn' in st.session_state and st.session_state['conn']:
        st.sidebar.subheader("–ó–∞–ø—Ä–æ—Å—ã")

        query_mode = st.sidebar.selectbox("–†–µ–∂–∏–º:", ["DDL/DML"],
                                          index=None, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º")

        if query_mode == "DDL/DML":
            st.title("–ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î")
            dml_query = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"):
                result_df = execute_query(dml_query)
                if result_df is not None:
                    st.dataframe(result_df, use_container_width=True)

            col1, col2 = st.columns(2)

            with col1:
                with st.expander("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"):
                    st.code('''
-- 1. –í—Å—Ç–∞–≤–∫–∞ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ ID
PRAGMA foreign_keys = ON;
INSERT INTO Channels (ID, Title, Description, CreationDate, SubscriberCount) 
VALUES ('ch1', 'One', 'One', '2024-01-01', 10);

INSERT INTO Channels (ID, Title, Description, CreationDate, SubscriberCount) 
VALUES ('ch1', 'One', 'One', '2023-01-02', 2000);

-- 2. –í—Å—Ç–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤. Channel_ID
INSERT INTO Videos (ID, Channel_ID, Project_ID, Title, Description, CreationDate, Duration, LikeCount, DislikeCount, CommentCount, ViewCount) 
VALUES ('vid1', 'none_channel', NULL, 'Title', 'Description', '2024-01-01', 30, 10, 0, 5, 10);

-- 3. –í—Å—Ç–∞–≤–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è SubscriberCount
INSERT INTO Channels (ID, Title, Description, CreationDate, SubscriberCount) 
VALUES ('ch2', 'One', 'Desc', '2024-01-03', -500);

-- 4. –í—Å—Ç–∞–≤–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ch1, –∑–∞—Ç–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
INSERT INTO Videos (ID, Channel_ID, Project_ID, Title, Description, CreationDate, Duration, LikeCount, DislikeCount, CommentCount, ViewCount) 
VALUES ('vid2', 'ch1', NULL, 'Title', 'Description', '2024-12-27', 600, 0, 0, 2, 20);

DELETE FROM Channels WHERE ID = 'ch1';

-- –ù–∏—á–µ–≥–æ –Ω–µ –≤–µ—Ä–Ω–µ—Ç
SELECT * FROM Videos WHERE Channel_ID = 'ch1';
                            ''', language="sql")

            with col2:
                with st.expander("–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"):
                    st.code('''
-- 0. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
SELECT name, sql FROM sqlite_master WHERE type='trigger';
                            
SELECT ID, Title, Status FROM Projects WHERE ID=3;
                            
INSERT INTO Incomes (ID, Project_ID, Category, Counterparty, CreationDate, Amount) 
VALUES (31, 3, '–ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', '–ê–Ω–¥—Ä–µ–µ–≤ –õ–∏–º–∏—Ç–µ–¥', '2019-11-09', 1477410+50000);
                            
-- 1. –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É                            
CREATE TRIGGER AfterInsertIncomes
AFTER INSERT ON Incomes
FOR EACH ROW
BEGIN
    UPDATE Projects
    SET Status = CASE
        WHEN (SELECT SUM(Amount) FROM Incomes WHERE Project_ID = NEW.Project_ID) >
             (SELECT SUM(Amount) FROM Costs WHERE Project_ID = NEW.Project_ID)
        THEN '–ü—Ä–∏–±—ã–ª—å–Ω—ã–π'
        ELSE '–£–±—ã—Ç–æ—á–Ω—ã–π'
    END
    WHERE ID = NEW.Project_ID;
END;
                            
-- 2. –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É   
CREATE TRIGGER AfterInsertCosts
AFTER INSERT ON Costs
FOR EACH ROW
BEGIN
    UPDATE Projects
    SET Status = CASE
        WHEN (SELECT SUM(Amount) FROM Incomes WHERE Project_ID = NEW.Project_ID) >
             (SELECT SUM(Amount) FROM Costs WHERE Project_ID = NEW.Project_ID)
        THEN '–ü—Ä–∏–±—ã–ª—å–Ω—ã–π'
        ELSE '–£–±—ã—Ç–æ—á–Ω—ã–π'
    END
    WHERE ID = NEW.Project_ID;
END; ''', language="sql")

        st.sidebar.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")

        visualization_topic = st.sidebar.selectbox("–°—É—â–Ω–æ—Å—Ç—å:",
                                                   ["–ö–∞–Ω–∞–ª—ã", "–í–∏–¥–µ–æ",
                                                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "–ü—Ä–æ–µ–∫—Ç—ã"],
                                                   index=None,
                                                   placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å")

        if visualization_topic:
            visualize_data(visualization_topic)
    else:
        st.warning(
            "–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ")

elif section == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã":
    st.markdown(""" # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
                - –ö–∞–Ω–∞–ª   
                - –ö–∞–Ω–∞–ª  
                - –í–∏–¥–µ–æ 
                
                ### –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                **–ê–Ω–∞–ª–∏–∑**   """)
